unit unFrmAtendimentos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Mask, Vcl.Buttons,
  Vcl.ExtCtrls, Data.DB, Vcl.Grids, Vcl.DBGrids, Controller.Atendimentos,
  Vcl.ComCtrls, unConstantes, unFrmConvenios, u_FrmBase, unFrmColaboradores,
  unFrmProcedimentos, unFrmCID, unFrmSetores, unFrmPacientes,
  unFrmResponsavelPaciente;

type
  TTpAtendimento = (tpAmbulatorial, tpInternacao);

type
  TfrmAtendimentos = class(TForm)
    PgCtrlAtendimentos: TPageControl;
    TbShAtendimentos: TTabSheet;
    TbShDadosAtendimento: TTabSheet;
    PnConsulta: TPanel;
    Label1: TLabel;
    GrpBxAtendimento: TGroupBox;
    edtAtendimento: TEdit;
    BtnConsulta: TBitBtn;
    CbxConsultaPor: TComboBox;
    GrpBxDatas: TGroupBox;
    Label2: TLabel;
    Label3: TLabel;
    mskInicial: TMaskEdit;
    mskFinal: TMaskEdit;
    GrpBxPaciente: TGroupBox;
    lblPaciente: TLabel;
    edtIDPaciente: TEdit;
    BtnBuscaPaciente: TBitBtn;
    PnAtendimentos: TPanel;
    GrdAmbulatoriais: TDBGrid;
    PnBotoes: TPanel;
    BtnNovo: TBitBtn;
    BtnAlterar: TBitBtn;
    BtnCancelar: TBitBtn;
    BtnSair: TBitBtn;
    PnDadosAtendimento: TPanel;
    PnBotoesAtendimento: TPanel;
    BtnSalvar: TBitBtn;
    BtnCancelarOperacao: TBitBtn;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label11: TLabel;
    edtIDAtendimento: TEdit;
    mskDataAtendimento: TMaskEdit;
    CbxCarater: TComboBox;
    Label12: TLabel;
    CbxTipoClinica: TComboBox;
    Label13: TLabel;
    CbxTipoAtendimento: TComboBox;
    Label14: TLabel;
    lblMedicoResponsavel: TLabel;
    BtnBuscaMedico: TBitBtn;
    edtMedicoResponsavel: TEdit;
    Label15: TLabel;
    edtProcedimento: TEdit;
    BtnBuscaProcedimento: TBitBtn;
    lblProcedimento: TLabel;
    Label16: TLabel;
    edtConvenio: TEdit;
    BtnBuscaConvenio: TBitBtn;
    lblConvenio: TLabel;
    Label17: TLabel;
    edtCIDProvisorio: TEdit;
    BtnBuscaCIDProvisorio: TBitBtn;
    lblCidProvisorio: TLabel;
    Label18: TLabel;
    edtSetor: TEdit;
    BtnBuscaSetor: TBitBtn;
    lblSetor: TLabel;
    Label19: TLabel;
    CbxResponsavel: TComboBox;
    PnResponsavel: TPanel;
    Label20: TLabel;
    edtResponsavel: TEdit;
    BtnBuscaResponsavel: TBitBtn;
    lblResponsavelPaciente: TLabel;
    Label28: TLabel;
    CbxStatus: TComboBox;
    Label29: TLabel;
    edtPaciente: TEdit;
    BtnBuscaPacienteNovoAtendimento: TBitBtn;
    lblPacienteNovo: TLabel;
    mskHoraAtendimento: TMaskEdit;
    Label10: TLabel;
    BtnAltaTransferencia: TBitBtn;
    PnAltaTransferencia: TPanel;
    PnCIDDefinitivo: TPanel;
    Label25: TLabel;
    lblCIDDefinitivo: TLabel;
    edtCIDDefinitivo: TEdit;
    BtnBuscaCIDDefinitivo: TBitBtn;
    PnDadosAlta: TPanel;
    Label21: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    mskDataAlta: TMaskEdit;
    CbxMotivoAlta: TComboBox;
    CbxTipoSaidaTISS: TComboBox;
    mskHoraAlta: TMaskEdit;
    PnTransferencia: TPanel;
    Label26: TLabel;
    Label27: TLabel;
    edtTransferidoPara: TEdit;
    BtnConsumos: TBitBtn;
    Label22: TLabel;
    CbxConsultaTipoAtendimento: TComboBox;
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure BtnNovoClick(Sender: TObject);
    procedure TbShDadosAtendimentoShow(Sender: TObject);
    procedure BtnSalvarClick(Sender: TObject);
    procedure edtConvenioExit(Sender: TObject);
    procedure BtnBuscaConvenioClick(Sender: TObject);
    procedure BtnCancelarOperacaoClick(Sender: TObject);
    procedure edtMedicoResponsavelExit(Sender: TObject);
    procedure edtProcedimentoExit(Sender: TObject);
    procedure edtCIDProvisorioExit(Sender: TObject);
    procedure edtSetorExit(Sender: TObject);
    procedure edtCIDDefinitivoExit(Sender: TObject);
    procedure BtnSairClick(Sender: TObject);
    procedure BtnBuscaMedicoClick(Sender: TObject);
    procedure BtnBuscaProcedimentoClick(Sender: TObject);
    procedure BtnBuscaCIDProvisorioClick(Sender: TObject);
    procedure BtnBuscaSetorClick(Sender: TObject);
    procedure BtnBuscaCIDDefinitivoClick(Sender: TObject);
    procedure edtPacienteExit(Sender: TObject);
    procedure BtnBuscaPacienteNovoAtendimentoClick(Sender: TObject);
    procedure BtnConsultaClick(Sender: TObject);
    procedure CbxConsultaPorChange(Sender: TObject);
    procedure BtnCancelarClick(Sender: TObject);
    procedure BtnAlterarClick(Sender: TObject);
    procedure GrdAmbulatoriaisCellClick(Column: TColumn);
    procedure GrdAmbulatoriaisDblClick(Sender: TObject);
    procedure GrdAmbulatoriaisKeyPress(Sender: TObject; var Key: Char);
    procedure BtnAltaTransferenciaClick(Sender: TObject);
    procedure edtIDPacienteExit(Sender: TObject);
    procedure BtnBuscaPacienteClick(Sender: TObject);
    procedure CbxResponsavelChange(Sender: TObject);
    procedure edtResponsavelExit(Sender: TObject);
    procedure BtnBuscaResponsavelClick(Sender: TObject);
  private

    iTipoAtendimento: TTpAtendimento;
    iTipoOperacao: integer;
    FController: TControllerAmbulatorial;
    procedure AlimentaModel;
    procedure VerificaTipoConsulta;
    procedure VerificaResponsavel;
    procedure LimparControles;
    procedure CarregarControles;
  public

    constructor Create(AOwner: TComponent; ATpAtendimento: TTpAtendimento); reintroduce;
  end;

var
  frmAtendimentos: TfrmAtendimentos;

implementation

{$R *.dfm}

procedure TfrmAtendimentos.AlimentaModel;
var
  vDataHoraAtendimento,vDataHoraAlta: TDateTime;
  vMedicoResponsavel,vProcedimento,vCidProvisorio,vSetor,vConvenio,
  vResponsavelPaciente, vCIDDefinitivo, vPaciente: integer;
begin
  FController.Model.Hora_atendimento := StrToTime(mskHoraAtendimento.Text);

  if TryStrToInt(edtPaciente.Text,vPaciente) then
    FController.Model.Id_paciente := vPaciente
  else
    begin
      MessageDlg('Informe o paciente a ser atendido!',mtWarning,[mbOk],0);
      edtPaciente.SetFocus;
      Exit;
    end;

  if TryStrToDateTime(mskDataAtendimento.Text,vDataHoraAtendimento) then
    FController.Model.Data_atendimento := vDataHoraAtendimento
  else
    begin
      MessageDlg('Informe a data e hora do atendimento!',mtWarning,[mbOk],0);
      mskDataAtendimento.SetFocus;
      Exit;
    end;

  FController.Model.Carater          := CbxCarater.ItemIndex;

  if TryStrToInt(edtMedicoResponsavel.Text,vMedicoResponsavel) then
    FController.Model.Id_medico_responsavel := vMedicoResponsavel
  else
    begin
      MessageDlg('Informe o médico responsável pelo atendimento!',mtWarning,[mbOk],0);
      edtMedicoResponsavel.SetFocus;
      Exit;
    end;

  if TryStrToInt(edtProcedimento.Text,vProcedimento) then
    FController.Model.Id_procedimento       := vProcedimento;

  FController.Model.Id_cid_provisorio     := edtCIDProvisorio.Text;

  if TryStrToInt(edtSetor.Text,vSetor) then
    FController.Model.Id_setor := vSetor
  else
    begin
      MessageDlg('Informe o setor!',mtWarning,[mbOk],0);
      edtSetor.SetFocus;
      Exit;
    end;

  FController.Model.Tipo_clinica          := CbxTipoClinica.ItemIndex;
  FController.Model.Tipo_atendimento      := CbxTipoAtendimento.ItemIndex;

  if TryStrToInt(edtConvenio.Text,vConvenio) then
    FController.Model.Id_convenio           := vConvenio
  else
    begin
      MessageDlg('Informe o convênio que o paciente será atendido!',mtWarning,[mbOK],0);
      edtConvenio.SetFocus;
      Exit;
    end;

  FController.Model.Responsavel_paciente  := CbxResponsavel.ItemIndex;
  if CbxResponsavel.ItemIndex = 2 then
    if TryStrToInt(edtResponsavel.Text,vResponsavelPaciente) then
      FController.Model.Id_responsavel := vResponsavelPaciente
    else
      begin
        MessageDlg('Informe o responsável pelo paciente!',mtWarning,[mbOk],0);
        edtResponsavel.SetFocus;
        Exit;
      end;

  if iTipoOperacao <> iINCLUINDO then
    begin
      FController.Model.Data_alta             := StrToDate(mskDataAlta.Text);
      FController.Model.Hora_alta             := StrToTime(mskHoraAlta.Text);

      if (edtCIDDefinitivo.Text <> trim('')) and (edtCIDDefinitivo.Text <> EmptyStr) then
        FController.Model.Id_cid_definitivo     := edtCIDDefinitivo.Text;

      FController.Model.Motivo_alta           := CbxMotivoAlta.ItemIndex;
      FController.Model.Tipo_saida_tiss       := CbxTipoSaidaTISS.ItemIndex;
      FController.Model.Transferido_para      := edtTransferidoPara.Text;
    end;
end;

procedure TfrmAtendimentos.BtnAltaTransferenciaClick(Sender: TObject);
begin
  iTipoOperacao := OPC_ALTERAR;
  PgCtrlAtendimentos.ActivePageIndex := 1;
  PnAltaTransferencia.Visible := True;
  FController.CarregarDadosAtendimento;
  CarregarControles;
  edtCIDDefinitivo.SetFocus;
end;

procedure TfrmAtendimentos.BtnAlterarClick(Sender: TObject);
begin
  { FAZER VERIFICAÇÃO SE O ATENDIMENTO JÁ TEM ALTA E HABILITAR PARTE DE BAIXO }
  iTipoOperacao := OPC_ALTERAR;
  PgCtrlAtendimentos.ActivePageIndex := 1;
  FController.CarregarDadosAtendimento;
  CarregarControles;
  VerificaResponsavel;
  edtPaciente.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaCIDDefinitivoClick(Sender: TObject);
begin
  inherited;
  try
    frmCID := TfrmCID.Create(Self,toConsulta);
    frmCID.ShowModal;
  finally
    edtCIDDefinitivo.Text := IntToStr(frmCID.FValueFieldKey);

    if (edtCIDDefinitivo.Text <> trim('0')) and (edtCIDDefinitivo.Text <> EmptyStr) then
      lblCIDDefinitivo.Caption := FController.GetDescricaoCID(edtCIDDefinitivo.Text,iINCLUINDO);

    FreeAndNil(frmCID);
  end;

  if lblCIDDefinitivo.Caption = trim('') then
    BtnBuscaCIDDefinitivo.SetFocus
  else
    mskDataAlta.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaCIDProvisorioClick(Sender: TObject);
begin
  inherited;
  try
    frmCID := TfrmCID.Create(Self,toConsulta);
    frmCID.ShowModal;
  finally
    edtCIDProvisorio.Text := IntToStr(frmCID.FValueFieldKey);

    if (edtCIDProvisorio.Text <> trim('0')) and (edtCIDProvisorio.Text <> EmptyStr) then
      lblCidProvisorio.Caption := FController.GetDescricaoCID(edtCIDProvisorio.Text,iINCLUINDO);

    FreeAndNil(frmCID);
  end;

  if lblCidProvisorio.Caption = trim('') then
    BtnBuscaCIDProvisorio.SetFocus
  else
    edtSetor.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaConvenioClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmConvenios := TfrmConvenios.Create(Self,toConsulta);
    frmConvenios.ShowModal;
  finally
    edtConvenio.Text := IntToStr(frmConvenios.FValueFieldKey);

    if TryStrToInt(edtConvenio.Text,vValue) then
      lblConvenio.Caption := FController.GetNomeConvenio(vValue,iINCLUINDO);

    FreeAndNil(frmConvenios);
  end;

  if lblConvenio.Caption = trim('') then
    BtnBuscaConvenio.SetFocus
  else
    edtMedicoResponsavel.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaMedicoClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmColaborador := TfrmColaborador.Create(Self,toConsulta);
    frmColaborador.ShowModal;
  finally
    edtMedicoResponsavel.Text := IntToStr(frmColaborador.FValueFieldKey);

    if TryStrToInt(edtMedicoResponsavel.Text,vValue) then
      lblMedicoResponsavel.Caption := FController.GetNomeMedico(vValue,iINCLUINDO);

    FreeAndNil(frmColaborador);
  end;

  if lblMedicoResponsavel.Caption = trim('') then
    BtnBuscaMedico.SetFocus
  else
    edtProcedimento.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaPacienteClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmPacientes := TfrmPacientes.Create(Self,toConsulta);
    frmPacientes.ShowModal;
  finally
    edtIDPaciente.Text := IntToStr(frmPacientes.FValueFieldKey);

    if TryStrToInt(edtIDPaciente.Text,vValue) then
      lblPaciente.Caption := FController.GetNomePaciente(vValue,iINCLUINDO);

    FreeAndNil(frmPacientes);
  end;

  if lblPaciente.Caption = trim('') then
    BtnBuscaPaciente.SetFocus
  else
    BtnConsulta.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaPacienteNovoAtendimentoClick(
  Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmPacientes := TfrmPacientes.Create(Self,toConsulta);
    frmPacientes.ShowModal;
  finally
    edtPaciente.Text := IntToStr(frmPacientes.FValueFieldKey);

    if TryStrToInt(edtPaciente.Text,vValue) then
      lblPacienteNovo.Caption := FController.GetNomePaciente(vValue,iINCLUINDO);

    FreeAndNil(frmPacientes);
  end;

  if lblPacienteNovo.Caption = trim('') then
    BtnBuscaPacienteNovoAtendimento.SetFocus
  else
    edtConvenio.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaProcedimentoClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmProcedimentos := TfrmProcedimentos.Create(Self,toConsulta);
    frmProcedimentos.ShowModal;
  finally
    edtProcedimento.Text := IntToStr(frmProcedimentos.FValueFieldKey);

    if TryStrToInt(edtProcedimento.Text,vValue) then
      lblProcedimento.Caption := FController.GetDescricaoProcedimento(vValue,iINCLUINDO);

    FreeAndNil(frmProcedimentos);
  end;

  if lblProcedimento.Caption = trim('') then
    BtnBuscaProcedimento.SetFocus
  else
    edtCIDProvisorio.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaResponsavelClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmResponsavelPaciente := TfrmResponsavelPaciente.Create(Self,toConsulta);
    frmResponsavelPaciente.ShowModal;
  finally
    edtResponsavel.Text := IntToStr(frmResponsavelPaciente.FValueFieldKey);

    if TryStrToInt(edtResponsavel.Text,vValue) then
      lblResponsavelPaciente.Caption := FController.GetResponsavelPaciente(vValue,iINCLUINDO);

    FreeAndNil(frmResponsavelPaciente);
  end;

  if lblResponsavelPaciente.Caption = trim('') then
    BtnBuscaResponsavel.SetFocus
  else
    BtnSalvar.SetFocus;
end;

procedure TfrmAtendimentos.BtnBuscaSetorClick(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  try
    frmSetores := TfrmSetores.Create(Self,toConsulta);
    frmSetores.ShowModal;
  finally
    edtSetor.Text := IntToStr(frmSetores.FValueFieldKey);

    if TryStrToInt(edtSetor.Text,vValue) then
      lblSetor.Caption := FController.GetDescricaoSetor(vValue,iINCLUINDO);

    FreeAndNil(frmSetores);
  end;

  if lblSetor.Caption = trim('') then
    BtnBuscaSetor.SetFocus
  else
    CbxResponsavel.SetFocus;
end;

procedure TfrmAtendimentos.BtnCancelarClick(Sender: TObject);
begin
  FController.CancelarAtendimento;
end;

procedure TfrmAtendimentos.BtnCancelarOperacaoClick(Sender: TObject);
begin
  PgCtrlAtendimentos.ActivePageIndex := 0;
  LimparControles;
end;

procedure TfrmAtendimentos.BtnConsultaClick(Sender: TObject);
begin
  if CbxConsultaPor.ItemIndex = 0 then
  begin
    if (mskInicial.Text <> dtVAZIA) and (mskFinal.Text <> dtVAZIA) then
    begin
      if CbxStatus.ItemIndex = 0 then
        FController.ConsultarAtendimento(StrToDate(mskInicial.Text),StrToDate(mskFinal.Text),stTODOS);

      if CbxStatus.ItemIndex = 1 then
        FController.ConsultarAtendimento(StrToDate(mskInicial.Text),StrToDate(mskFinal.Text),stAGUARDANDO);

      if CbxStatus.ItemIndex = 2 then
        FController.ConsultarAtendimento(StrToDate(mskInicial.Text),StrToDate(mskFinal.Text),stEMATENDIMENTO);

      if CbxStatus.ItemIndex = 3 then
        FController.ConsultarAtendimento(StrToDate(mskInicial.Text),StrToDate(mskFinal.Text),stALTAOUENCAMINHADO);
    end
    else
      begin
        MessageDlg('Datas incorretas, por favor verifique!',mtWarning,[mbOk],0);
        mskInicial.SetFocus;
      end;
  end;

  if CbxConsultaPor.ItemIndex = 1 then
  begin
    if (edtAtendimento.Text <> EmptyStr) and (edtAtendimento.Text <> trim('0')) then
      FController.ConsultarAtendimento(StrToInt(edtAtendimento.Text))
    else
      begin
        MessageDlg('Número do atendimento incorreto, por favor verifique!',mtWarning,[mbOk],0);
        edtAtendimento.SetFocus;
      end;
  end;

  if CbxConsultaPor.ItemIndex = 2 then
  begin
    if (edtIDPaciente.Text <> EmptyStr) and (edtIDPaciente.Text <> trim('0')) then
      begin
        if CbxStatus.ItemIndex = 0 then
          FController.ConsultarAtendimento(StrToDateTime(mskInicial.Text),
                                        StrToDateTime(mskFinal.Text),
                                          StrToInt(edtIDPaciente.Text),stTODOS);

        if CbxStatus.ItemIndex = 1 then
          FController.ConsultarAtendimento(StrToDateTime(mskInicial.Text),
                                        StrToDateTime(mskFinal.Text),
                                          StrToInt(edtIDPaciente.Text),stAGUARDANDO);

        if CbxStatus.ItemIndex = 2 then
          FController.ConsultarAtendimento(StrToDateTime(mskInicial.Text),
                              StrToDateTime(mskFinal.Text),
                                StrToInt(edtIDPaciente.Text),stEMATENDIMENTO);

        if CbxStatus.ItemIndex = 3 then
          FController.ConsultarAtendimento(StrToDateTime(mskInicial.Text),
                                        StrToDateTime(mskFinal.Text),
                                          StrToInt(edtIDPaciente.Text),stALTAOUENCAMINHADO);
      end
      else
        begin
          MessageDlg('Datas ou Paciente incorreto, por favor verifique!',mtWarning,[mbOk],0);
          mskInicial.SetFocus;
        end;
  end;
end;

procedure TfrmAtendimentos.BtnNovoClick(Sender: TObject);
begin
  mskDataAtendimento.Text := DateTimeToStr(Now);
  PgCtrlAtendimentos.ActivePageIndex := 1;
  iTipoOperacao := iINCLUINDO;
  PnDadosAlta.Visible := false;
  PnTransferencia.Visible := false;
  PnCIDDefinitivo.Visible := false;
end;

procedure TfrmAtendimentos.BtnSairClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmAtendimentos.BtnSalvarClick(Sender: TObject);
begin
  if iTipoOperacao = iINCLUINDO then
    begin
      AlimentaModel;
      FController.Model.Status := 'A';

      if iTipoAtendimento = tpAmbulatorial then
        FController.Model.Tipo := iTpAMBULATORIAL
      else
        FController.Model.Tipo := iTpINTERNACAO;

      FController.IncluirAtendimento;
      PgCtrlAtendimentos.ActivePageIndex := 0;
      BtnConsultaClick(self);
    end;

  if iTipoOperacao = iALTERANDO then
    begin
      AlimentaModel;
      FController.AlterarAtendimento(StrToInt(edtIDAtendimento.Text));
      PgCtrlAtendimentos.ActivePageIndex := 0;
      BtnConsultaClick(self);
    end;
end;

procedure TfrmAtendimentos.CarregarControles;
begin
  edtIDAtendimento.Text := IntToStr(FController.Model.Id);
  mskDataAtendimento.Text := DateToStr(FController.Model.Data_atendimento);
  mskHoraAtendimento.Text := TimeToStr(FController.Model.Hora_atendimento);
  CbxCarater.ItemIndex    := FController.Model.Carater;
  CbxTipoClinica.ItemIndex:= FController.Model.Tipo_clinica;
  CbxTipoAtendimento.ItemIndex := FController.Model.Tipo_atendimento;

  edtPaciente.Text := IntToStr(FController.Model.Id_paciente);
  lblPacienteNovo.Caption  := FController.GetNomePaciente(FController.Model.Id_paciente,iALTERANDO);

  edtConvenio.Text := IntToStr(FController.Model.Id_convenio);
  lblConvenio.Caption := FController.GetNomeConvenio(FController.Model.Id_convenio,iALTERANDO);

  edtMedicoResponsavel.Text := IntToStr(FController.Model.Id_medico_responsavel);
  lblMedicoResponsavel.Caption := FController.GetNomeMedico(FController.Model.Id_medico_responsavel,iALTERANDO);

  edtProcedimento.Text := IntToStr(FController.Model.Id_procedimento);
  lblProcedimento.Caption := FController.GetDescricaoProcedimento(FController.Model.Id_procedimento,iALTERANDO);

  edtCIDProvisorio.Text := FController.Model.Id_cid_provisorio;
  lblCidProvisorio.Caption := FController.GetDescricaoCID(FController.Model.Id_cid_provisorio,iALTERANDO);

  edtSetor.Text := IntToStr(FController.Model.Id_setor);
  lblSetor.Caption := FController.GetDescricaoSetor(FController.Model.Id_setor,iALTERANDO);

  CbxResponsavel.ItemIndex := FController.Model.Responsavel_paciente;

  edtResponsavel.Text := IntToStr(FController.Model.Id_responsavel);
  lblResponsavelPaciente.Caption := FController.GetResponsavelPaciente(FController.Model.Id_responsavel,iALTERANDO);

  edtTransferidoPara.Text := FController.Model.Transferido_para;

  edtCIDDefinitivo.Text := FController.Model.Id_cid_definitivo;
  lblCIDDefinitivo.Caption := FController.GetDescricaoCID(FController.Model.Id_cid_definitivo,iALTERANDO);

  mskDataAlta.Text := DateToStr(FController.Model.Data_alta);
  mskHoraAlta.Text := TimeToStr(FController.Model.Hora_alta);
  CbxMotivoAlta.ItemIndex := FController.Model.Motivo_alta;
  CbxTipoSaidaTISS.ItemIndex := FController.Model.Tipo_saida_tiss;
end;

procedure TfrmAtendimentos.CbxConsultaPorChange(Sender: TObject);
begin
  VerificaTipoConsulta;
end;

procedure TfrmAtendimentos.CbxResponsavelChange(Sender: TObject);
begin
  VerificaResponsavel;
end;

constructor TfrmAtendimentos.Create(AOwner: TComponent;
  ATpAtendimento: TTpAtendimento);
begin
  inherited Create(AOwner);
  iTipoAtendimento := ATpAtendimento;
end;

procedure TfrmAtendimentos.edtCIDDefinitivoExit(Sender: TObject);
begin
  inherited;
  if (edtCIDDefinitivo.Text <> trim('0')) and (edtCIDDefinitivo.Text <> EmptyStr) then
    lblCIDDefinitivo.Caption := FController.GetDescricaoCID(edtCIDProvisorio.Text,iINCLUINDO);

  if lblCIDDefinitivo.Caption = trim('') then
    BtnBuscaCIDDefinitivo.SetFocus
  else
    mskDataAlta.SetFocus;
end;

procedure TfrmAtendimentos.edtCIDProvisorioExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if (edtCIDProvisorio.Text <> trim('0')) and (edtCIDProvisorio.Text <> EmptyStr) then
    lblCidProvisorio.Caption := FController.GetDescricaoCID(edtCIDProvisorio.Text,iINCLUINDO);

  if lblCidProvisorio.Caption = trim('') then
    BtnBuscaCIDProvisorio.SetFocus
  else
    edtSetor.SetFocus;
end;

procedure TfrmAtendimentos.edtConvenioExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtConvenio.Text,vValue) then
    lblConvenio.Caption := FController.GetNomeConvenio(vValue,iINCLUINDO);

  if lblConvenio.Caption = trim('') then
    BtnBuscaConvenio.SetFocus
  else
    edtMedicoResponsavel.SetFocus;
end;

procedure TfrmAtendimentos.edtIDPacienteExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtIDPaciente.Text,vValue) then
    lblPaciente.Caption := FController.GetNomePaciente(vValue,iINCLUINDO);

  if lblPaciente.Caption = trim('') then
    BtnBuscaPaciente.SetFocus
  else
    BtnConsulta.SetFocus;
end;

procedure TfrmAtendimentos.edtMedicoResponsavelExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtMedicoResponsavel.Text,vValue) then
    lblMedicoResponsavel.Caption := FController.GetNomeMedico(vValue,iINCLUINDO);

  if lblMedicoResponsavel.Caption = trim('') then
    BtnBuscaMedico.SetFocus
  else
    edtProcedimento.SetFocus;
end;

procedure TfrmAtendimentos.edtPacienteExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtPaciente.Text,vValue) then
    lblPacienteNovo.Caption := FController.GetNomePaciente(vValue,iINCLUINDO);

  if lblPacienteNovo.Caption = trim('') then
    BtnBuscaPacienteNovoAtendimento.SetFocus
  else
    edtConvenio.SetFocus;
end;

procedure TfrmAtendimentos.edtProcedimentoExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtProcedimento.Text,vValue) then
    lblProcedimento.Caption := FController.GetDescricaoProcedimento(vValue,iINCLUINDO);

  if lblProcedimento.Caption = trim('') then
    BtnBuscaProcedimento.SetFocus
  else
    edtCIDProvisorio.SetFocus;
end;

procedure TfrmAtendimentos.edtResponsavelExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtResponsavel.Text,vValue) then
    lblResponsavelPaciente.Caption := FController.GetResponsavelPaciente(vValue,iINCLUINDO);

  if lblResponsavelPaciente.Caption = trim('') then
    BtnBuscaResponsavel.SetFocus
  else
    begin
      if iTipoOperacao = OPC_INCLUIR then
        BtnSalvar.SetFocus;
    end;
end;

procedure TfrmAtendimentos.edtSetorExit(Sender: TObject);
var
  vValue: integer;
begin
  inherited;
  if TryStrToInt(edtSetor.Text,vValue) then
    lblSetor.Caption := FController.GetDescricaoSetor(vValue,iINCLUINDO);

  if lblSetor.Caption = trim('') then
    BtnBuscaSetor.SetFocus
  else
    CbxResponsavel.SetFocus;
end;

procedure TfrmAtendimentos.FormCreate(Sender: TObject);
begin
  FController := TControllerAmbulatorial.Create;
end;

procedure TfrmAtendimentos.FormDestroy(Sender: TObject);
begin
  FreeAndNil(FController);
end;

procedure TfrmAtendimentos.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = VK_ESCAPE then
    Self.Close;

  if Key = VK_RETURN then
    perform(WM_NEXTDLGCTL,0,0);
end;

procedure TfrmAtendimentos.FormShow(Sender: TObject);
begin
  PgCtrlAtendimentos.ActivePageIndex := 0;
  mskInicial.Text := DateToStr(Now);
  mskFinal.Text   := DateToStr(Now);
  mskInicial.SetFocus;
//  frmAmbulatoriais.Height := 610;
//  661 se for usar alta e transferencia
  GrdAmbulatoriais.DataSource := FController.DataSource;
  VerificaTipoConsulta;
  BtnConsultaClick(Self);
end;

procedure TfrmAtendimentos.GrdAmbulatoriaisCellClick(Column: TColumn);
begin
  FController.CarregarDadosAtendimento;
end;

procedure TfrmAtendimentos.GrdAmbulatoriaisDblClick(Sender: TObject);
begin
  FController.CarregarDadosAtendimento;
end;

procedure TfrmAtendimentos.GrdAmbulatoriaisKeyPress(Sender: TObject;
  var Key: Char);
begin
  FController.CarregarDadosAtendimento;
end;

procedure TfrmAtendimentos.LimparControles;
var
  n : Integer;
  nTotComponentes : Integer;
begin
  FController.CleanModel;
  lblPacienteNovo.Caption := '';
  lblMedicoResponsavel.Caption := '';
  lblProcedimento.Caption := '';
  lblConvenio.Caption := '';
  lblCidProvisorio.Caption := '';
  lblSetor.Caption := '';
  lblResponsavelPaciente.Caption := '';
  lblCIDDefinitivo.Caption := '';

  nTotComponentes :=  Self.ComponentCount;
    for n := 0 to nTotComponentes-1 do
      begin
      if(Self.Components[n] is TEdit)then
        begin
          (Self.Components[n] as TEdit).Clear;
        end
      else
      if(Self.Components[n] is TMemo)then
        begin
         (Self.Components[n] as TMemo).Clear;
        end
      else
      if(Self.Components[n] is TMaskEdit)then
        begin
          (Self.Components[n] as TMaskEdit).Clear
        end
      else
      if (Self.Components[n] is TComboBox)then
        begin
          (Self.Components[n] as TComboBox).ItemIndex := 0;
          (Self.Components[n] as TComboBox).Text := '';
         end
      else
      if (Self.Components[n] is TRichEdit) then
        begin
          (Self.Components[n] as TRichEdit).Lines.Text := '';
        end;
      end;
end;

procedure TfrmAtendimentos.TbShDadosAtendimentoShow(Sender: TObject);
begin
  mskDataAtendimento.SetFocus;
end;

procedure TfrmAtendimentos.VerificaResponsavel;
begin
  if CbxResponsavel.ItemIndex = 1 then
    PnResponsavel.Visible := false;

  if CbxResponsavel.ItemIndex = 2 then
    begin
      PnResponsavel.Visible := true;
      BtnBuscaResponsavel.SetFocus;
    end;
end;

procedure TfrmAtendimentos.VerificaTipoConsulta;
begin
  if CbxConsultaPor.ItemIndex = 0 then
    begin
      GrpBxAtendimento.Visible := False;
      GrpBxPaciente.Visible := False;
      GrpBxDatas.Visible := True;
      mskInicial.SetFocus;
    end;

    if CbxConsultaPor.ItemIndex = 1 then // atendimento
      begin
        GrpBxAtendimento.Visible := true;
        GrpBxDatas.Visible := false;
        GrpBxPaciente.Visible := false;
        edtAtendimento.SetFocus;
      end;

    if CbxConsultaPor.ItemIndex = 2 then
      begin
        GrpBxAtendimento.Visible := False;
        GrpBxDatas.Visible := true;
        GrpBxPaciente.Visible := true;
        mskInicial.SetFocus;
      end;
end;

end.
