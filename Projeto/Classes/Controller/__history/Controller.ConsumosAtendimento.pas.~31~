unit Controller.ConsumosAtendimento;

interface

uses
  Conexao, Lca.Orm.Comp.FireDac, Model.Itens_Atendimento, Data.DB,
  System.SysUtils, Vcl.Dialogs;

type
  TControllerConsumosAtendimento = class
    private
      FConexao: TConexao;
      FDao: TDaoFireDac;
      FModel: TItens_Atendimento;
      FRegistros: TDataSet;
      FRegistrosMatMeds: TDataSet;
      FRegistrosProcedimentos: TDataSet;
      FDsMatMeds: TDataSource;
      FDsProcedimentos: TDataSource;
      FDs: TDataSource;
    public
      constructor Create;
      destructor Destroy;
      procedure LimparModel;
      function IncluirItem(pTipoItem,pID: integer): Boolean;
      function ConsultarDadosAtendimento(pID: integer): boolean;
      function ConsultarMatMedsAtendimento(pID: integer): boolean;
      property Model : TItens_Atendimento read FModel write FModel;
      property Registros: TDataSet read FRegistros write FRegistros;
  end;

implementation

{ TControllerConsumoAtendimento }

function TControllerConsumosAtendimento.ConsultarDadosAtendimento(
  pID: integer): boolean;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT pac.nome, at.tipo, at.id_convenio, c.nome,');
    ConsultaSQL.Append(' CASE WHEN at.tipo = 1 THEN :param1');
    ConsultaSQL.Append(' WHEN at.tipo = 2 THEN :param2');
    ConsultaSQL.Append(' END,');
    ConsultaSQL.Append(' FROM atendimentos.atendimentos at');
    ConsultaSQL.Append(' INNER JOIN pacientes pac');
    ConsultaSQL.Append(' ON pac.id = at.id_paciente');
    ConsultaSQL.Append(' INNER JOIN convenios c');
    ConsultaSQL.Append(' ON c.id = at.id_convenio');
    ConsultaSQL.Append(' LEFT JOIN faturamento.tabela_preco_matmed tmm');
    ConsultaSQL.Append(' ON c.id_tabela_preco_matmed = tmm.id');
    ConsultaSQL.Append(' LEFT JOIN faturamento.tabela_preco_procedimentos tp');
    ConsultaSQL.Append(' ON c.id_tabela_preco_procedimentos = tp.id');
    ConsultaSQL.Append(' WHERE at.id = :param1');
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,['Ambulatório','Internação',pID]);
    FDs.DataSet := FRegistros;
    FreeAndNil(ConsultaSQL);

    if FRegistros.RecordCount > 0 then
      Result := True
    else
    begin
      Result := False;
      MessageDlg('Atendimento não encontrado!',mtWarning,[mbOk],0);
    end;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar dados do atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

function TControllerConsumosAtendimento.ConsultarMatMedsAtendimento(
  pID: integer): boolean;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT it.*, mm.descricao As MatMed, p.descricao As Procedimento');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento it');
    ConsultaSQL.Append(' LEFT JOIN estoque.matmed mm');
    ConsultaSQL.Append(' ON it.id_matmed = mm.id');
    ConsultaSQL.Append(' LEFT JOIN procedimentos p');
    ConsultaSQL.Append(' ON it.id_procedimento = p.id');
    ConsultaSQL.Append(' WHERE it.id_atendimento = :param1');

    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[pID]);
    FDs.DataSet := FRegistros;
    FreeAndNil(ConsultaSQL);
    Result := True;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar itens consumidos no atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;

end;

constructor TControllerConsumosAtendimento.Create;
begin
  FConexao := TConexao.Create;
  FDao := TDaoFireDac.Create(FConexao.FdCon,FConexao.FdTran);
  FModel := TItens_Atendimento.Create;
  FDs := TDataSource.Create(nil);
  FDsMatMeds := TDataSource.Create(nil);
  FDsProcedimentos := TDataSource.Create(nil);
end;

destructor TControllerConsumosAtendimento.Destroy;
begin
  FreeAndNil(FConexao);
  FreeAndNil(FDao);
  FreeAndNil(FModel);
  FreeAndNil(FDs);
  FreeAndNil(FDsMatMeds);
  FreeAndNil(FDsProcedimentos);
  inherited;
end;

function TControllerConsumosAtendimento.IncluirItem(pTipoItem, pID: integer): Boolean;
begin
  try
    Model.Id_Atendimento := pID;
    FModel.Id := FDao.GetID(FModel,'id');
    FDao.Inserir(FModel);
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro incluir item no atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

procedure TControllerConsumosAtendimento.LimparModel;
begin
  Model.Id := 0;
  Model.Id_matmed := 0;
  Model.Id_procedimento := 0;
  Model.DataConsumo := 0;
  Model.Quantidade := 0;
  Model.Valor := 0;
  Model.Valor_Total := 0;
  Model.Exame := 0;
  Model.Id_Atendimento := 0;
end;

end.
