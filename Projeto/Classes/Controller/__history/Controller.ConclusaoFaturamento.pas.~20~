unit Controller.ConclusaoFaturamento;

interface

uses
  Lca.Orm.Comp.FireDac, Conexao, Model.Faturas, unConstantes, Model.Atendimentos,
  Model.Atendimentos_Fatura;

type
  TControllerConclusaoFaturamento = class
    private
      FDao: TDaoFireDac;
      FConexao: TConexao;
      FFatura: TFaturas;
      FAtendimento: TAtendimento;
      FAtendimentos_Fatura: TAtendimentos_Fatura;
    function AlterarStatusAtendimento(pIDAtendimento: integer;
      pStatus: string): boolean;
    public
      function GetDescricaoFatura(AID,iOperacao: integer): string;
      function AlterarStatusAtendimento(pIDAtendimento:integer): boolean; overload;
      function AlterarStatusAtendimento(pIDAtendimento,pMotivo:integer): boolean; overload;
      function IncluirContaFatura(pIDAtendimento,pIDFatura: integer): boolean;
      constructor Create;
      destructor Destroy; override;
  end;

implementation

uses
  System.SysUtils;

{ TControllerConclusaoFaturamento }

function TControllerConclusaoFaturamento.AlterarStatusAtendimento(
  pIDAtendimento, pMotivo: integer): boolean;
begin
  FAtendimento.Id := pIDAtendimento;
  FAtendimento.Status_Faturamento := 'NC';
  FAtendimento.Motivo_Nao_Cobranca := pMotivo;
    FDao.Salvar(FAtendimento,['status_faturamento']);
    Result := true;
  except
    on e: Exception do
    begin
      Result := False;
      raise Exception.Create('Erro ao atualizar status do atendimento para faturado!' +#13+ e.Message);
    end;
  end;
end;

function TControllerConclusaoFaturamento.AlterarStatusAtendimento(
  pIDAtendimento: integer): boolean;
begin
  FAtendimento.Id := pIDAtendimento;
  FAtendimento.Status_Faturamento := 'C';
    FDao.Salvar(FAtendimento,['status_faturamento']);
    Result := true;
  except
    on e: Exception do
    begin
      Result := False;
      raise Exception.Create('Erro ao atualizar status do atendimento para faturado!' +#13+ e.Message);
    end;
  end;
end;

constructor TControllerConclusaoFaturamento.Create;
begin
  FAtendimentos_Fatura := TAtendimentos_Fatura.Create;
  FAtendimento := TAtendimento.Create;
  FFatura := TFaturas.Create;
  FConexao := TConexao.Create;
  FDao := TDaoFireDac.Create(FConexao.FdCon,FConexao.FdTran);
end;

destructor TControllerConclusaoFaturamento.Destroy;
begin
  FAtendimentos_Fatura.Free;
  FAtendimento.Free;
  FFatura.Free;
  FConexao.Free;
  FDao.Free;
  inherited;
end;

function TControllerConclusaoFaturamento.GetDescricaoFatura
  (AID,iOperacao: integer): string;
begin
  if Assigned(FDao) then
    Result := FDao.GetValueForeignKey(FFatura,'descricao','id',AID,iOperacao);
end;

function TControllerConclusaoFaturamento.IncluirContaFatura(pIDAtendimento,pIDFatura: integer): boolean;
begin
  try
    FAtendimentos_Fatura.Id := FDao.GetID(FAtendimentos_Fatura,'id');
    FAtendimentos_Fatura.Id_Atendimento := pIDAtendimento;
    FAtendimentos_Fatura.Id_Fatura := pIDFatura;
    FDao.Inserir(FAtendimentos_Fatura);
    Result := True;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao incluir registro na tabela: Atendimentos_Fatura' +#13+ e.Message);
      Result := false;
    end;
  end;
end;

end.
