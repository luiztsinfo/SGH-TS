unit Controller.ConsumosAtendimento;

interface

uses
  Conexao, Lca.Orm.Comp.FireDac, Model.Itens_Atendimento, Data.DB,
  System.SysUtils, Vcl.Dialogs, Model.MatMed, Model.Procedimento, unConstantes;

type
  TControllerConsumosAtendimento = class
    private
      FConexao: TConexao;
      FDao: TDaoFireDac;
      FModel: TItens_Atendimento;
      FRegistros: TDataSet;
      FRegistrosMatMeds: TDataSet;
      FRegistrosProcedimentos: TDataSet;
      FDsMatMeds: TDataSource;
      FDsProcedimentos: TDataSource;
      FDs: TDataSource;
      FMatMed: TMatMed;
      FProcedimento: TProcedimentos;
      FID_Convenio: integer;

    public
      constructor Create;
      destructor Destroy; override;

      procedure LimparModel;

      function GetDescricaoProcedimento(AID: Integer;iOperacao: integer): string;
      function GetDescricaoMatMed(AID: Integer;iOperacao: integer): string;
      function GetValorProcedimento(AID: Integer): Double;
      function GetValorHonorariosMedicos(AID: Integer): Double;
      function GetvalorOperacional(AID: Integer): Double;
      function GetValorMatMed(AID: integer): Double;

      function GetValorTotalGeral(pIDAtendimento: integer): Double;
      function GetTotalMatMeds(pIDAtendimento: integer): Double;
      function GetTotalCustoOperacional(pIDAtendimento: integer): Double;
      function GetTotalHonorariosMedicos(pIDAtendimento: integer): Double;

      function IncluirItem(pTipoItem,pID: integer): Boolean;
      function ExcluirItem(pTipoItem: integer): Boolean;

      function ConsultarDadosAtendimento(pID: integer): boolean;
      function ConsultarMatMedsAtendimento(pID: integer): boolean;
      function ConsultarProcedimentosAtendimento(pID: integer): boolean;

      property Model : TItens_Atendimento read FModel write FModel;
      property Registros: TDataSet read FRegistros write FRegistros;
      property DsMatMeds: TDataSource read FDsMatMeds write FDsMatMeds;
      property DsProcedimentos: TDataSource read FDsProcedimentos write FDsProcedimentos;
      property ID_Convenio: integer read FID_Convenio write FID_Convenio;
  end;

implementation

{ TControllerConsumoAtendimento }

function TControllerConsumosAtendimento.ConsultarDadosAtendimento(
  pID: integer): boolean;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT pac.nome, at.tipo, at.id_convenio, c.nome AS Convenio,');
    ConsultaSQL.Append(' CASE WHEN at.tipo = 1 THEN :param1');
    ConsultaSQL.Append(' WHEN at.tipo = 2 THEN :param2');
    ConsultaSQL.Append(' END As TipoAtendimento');
    ConsultaSQL.Append(' FROM atendimentos.atendimentos at');
    ConsultaSQL.Append(' INNER JOIN pacientes pac');
    ConsultaSQL.Append(' ON pac.id = at.id_paciente');
    ConsultaSQL.Append(' INNER JOIN convenios c');
    ConsultaSQL.Append(' ON c.id = at.id_convenio');
    ConsultaSQL.Append(' LEFT JOIN faturamento.tabela_preco_matmed tmm');
    ConsultaSQL.Append(' ON c.id_tabela_preco_matmed = tmm.id');
    ConsultaSQL.Append(' LEFT JOIN faturamento.tabela_preco_procedimentos tp');
    ConsultaSQL.Append(' ON c.id_tabela_preco_procedimentos = tp.id');
    ConsultaSQL.Append(' WHERE at.id = :param3');
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,['Ambulatório','Internação',pID]);
    ID_Convenio := FRegistros.FieldByName('id_convenio').AsInteger;
    FDs.DataSet := FRegistros;
    FreeAndNil(ConsultaSQL);

    if FRegistros.RecordCount > 0 then
      Result := True
    else
    begin
      Result := False;
      MessageDlg('Atendimento não encontrado!',mtWarning,[mbOk],0);
    end;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar dados do atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

function TControllerConsumosAtendimento.ConsultarMatMedsAtendimento(
  pID: integer): boolean;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT it.*, mm.descricao As MatMed');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento it');
    ConsultaSQL.Append(' INNER JOIN estoque.matmed mm');
    ConsultaSQL.Append(' ON it.id_matmed = mm.id');
    ConsultaSQL.Append(' WHERE it.id_atendimento = :param1');

    FRegistrosMatMeds := FDao.ConsultaSql(ConsultaSQL.ToString,[pID]);
    DsMatMeds.DataSet := FRegistrosMatMeds;
    FreeAndNil(ConsultaSQL);
    Result := True;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar itens consumidos no atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

function TControllerConsumosAtendimento.ConsultarProcedimentosAtendimento(
  pID: integer): boolean;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT it.*, p.descricao As Procedimento');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento it');
    ConsultaSQL.Append(' INNER JOIN procedimentos p');
    ConsultaSQL.Append(' ON it.id_procedimento = p.id');
    ConsultaSQL.Append(' WHERE it.id_atendimento = :param1');

    FRegistrosProcedimentos := FDao.ConsultaSql(ConsultaSQL.ToString,[pID]);
    DsProcedimentos.DataSet := FRegistrosProcedimentos;
    FreeAndNil(ConsultaSQL);
    Result := True;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar procedimentos consumidos no atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

constructor TControllerConsumosAtendimento.Create;
begin
  FConexao := TConexao.Create;
  FDao := TDaoFireDac.Create(FConexao.FdCon,FConexao.FdTran);
  FModel := TItens_Atendimento.Create;
  FDs := TDataSource.Create(nil);
  FDsMatMeds := TDataSource.Create(nil);
  FDsProcedimentos := TDataSource.Create(nil);
  FMatMed := TMatMed.Create;
  FProcedimento := TProcedimentos.Create;
  inherited;
end;

destructor TControllerConsumosAtendimento.Destroy;
begin
  inherited;
  FConexao.Free;
  FDao.Free;
  FModel.Free;
  FDs.Free;
  FDsMatMeds.Free;
  FDsProcedimentos.Free;
  FMatMed.Free;
  FProcedimento.Free;
end;

function TControllerConsumosAtendimento.ExcluirItem(pTipoItem: integer): Boolean;
begin
  try
    if pTipoItem = iTpMatMed then
      FModel.Id := FRegistrosMatMeds.FieldByName('id').AsInteger
    else
      FModel.Id := FRegistrosProcedimentos.FieldByName('id').AsInteger;

    FDao.Excluir(FModel,['id']);
    Result := true;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao excluir item do atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetTotalCustoOperacional(
  pIDAtendimento: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT SUM(ia.valor_operacional) As Operacional');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento ia');
    ConsultaSQL.Append(' WHERE ia.id_atendimento = :atendimento');
    ConsultaSQL.Append(' AND ia.id_procedimento > 0');

    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[pIDAtendimento]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('Operacional').AsFloat;
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar valor operacional do atendimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;

end;

function TControllerConsumosAtendimento.GetDescricaoMatMed(AID,
  iOperacao: integer): string;
begin
  if Assigned(FDao) then
    Result := FDao.GetValueForeignKey(FMatMed,'descricao','id',AID,iOperacao);
end;

function TControllerConsumosAtendimento.GetDescricaoProcedimento(AID,
  iOperacao: integer): string;
begin
  if Assigned(FDao) then
    Result := FDao.GetValueForeignKey(FProcedimento,'descricao','id',AID,iOperacao);
end;

function TControllerConsumosAtendimento.GetTotalHonorariosMedicos(
  pIDAtendimento: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT SUM(ia.valor_honorarios_medicos) As HonorariosMedicos');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento ia');
    ConsultaSQL.Append(' WHERE ia.id_atendimento = :atendimento');
    ConsultaSQL.Append(' AND ia.id_procedimento > 0');

    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[pIDAtendimento]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('HonorariosMedicos').AsFloat;
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar honorários médicos do atendimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetTotalMatMeds(
  pIDAtendimento: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;

  try
    ConsultaSQL.Append(' SELECT SUM(ia.valor_total) As TotalMatMed');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento ia');
    ConsultaSQL.Append(' WHERE ia.id_atendimento = :atendimento');
    ConsultaSQL.Append(' AND ia.id_matmed > 0');
    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[pIDAtendimento]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('TotalMatMed').AsFloat;
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar totais de MatMed do atendimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetValorHonorariosMedicos(
  AID: Integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT valor_padrao_honorarios_medicos');
    ConsultaSQL.Append(' FROM procedimentos');
    ConsultaSQL.Append(' WHERE id = :procedimento');
    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[AID]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('valor_padrao_honorarios_medicos').AsFloat;
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar valor honorários médicos no cadastro do procedimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetValorMatMed(AID: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT it.valor');
    ConsultaSQL.Append(' FROM faturamento.itens_tabela_preco_matmed it');
    ConsultaSQL.Append(' INNER JOIN faturamento.tabela_preco_matmed tb');
    ConsultaSQL.Append(' ON tb.id = it.id_tabela_preco_matmed');
    ConsultaSQL.Append(' INNER JOIN convenios c');
    ConsultaSQL.Append(' ON c.id_tabela_preco_matmed = tb.id');
    ConsultaSQL.Append(' INNER JOIN estoque.matmed mm');
    ConsultaSQL.Append(' ON mm.id = it.id_matmed');
    ConsultaSQL.Append(' WHERE c.id = :convenio');
    ConsultaSQL.Append(' AND it.id_matmed = :matmed');
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[ID_Convenio,AID]);

    if (FRegistros.RecordCount > 0) and (FRegistros.FieldByName('valor').AsFloat > 0) then
      Result := FRegistros.FieldByName('valor').AsFloat
    else
    begin
      ConsultaSQL.Clear;
      ConsultaSQL.Append(' SELECT valor_padrao');
      ConsultaSQL.Append(' FROM estoque.matmed');
      ConsultaSQL.Append(' WHERE id = :matmed');
      FRegistros.Close;
      FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[AID]);
      Result := FRegistros.FieldByName('valor_padrao').AsFloat;
    end;

    FreeAndNil(ConsultaSQL);
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar valor na tabela de preço!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetvalorOperacional(
  AID: Integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT valor_padrao_operacional');
    ConsultaSQL.Append(' FROM procedimentos');
    ConsultaSQL.Append(' WHERE id = :procedimento');
    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[AID]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('valor_padrao_operacional').AsFloat;
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar valor operacional no cadastro do procedimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetValorProcedimento(AID: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT it.valor_total');
    ConsultaSQL.Append(' FROM faturamento.itens_tabela_preco_procedimentos it');
    ConsultaSQL.Append(' INNER JOIN faturamento.tabela_preco_procedimentos tb');
    ConsultaSQL.Append(' ON tb.id = it.id_tabela_procedimentos');
    ConsultaSQL.Append(' INNER JOIN convenios c');
    ConsultaSQL.Append(' ON c.id_tabela_preco_procedimentos = tb.id');
    ConsultaSQL.Append(' INNER JOIN procedimentos p');
    ConsultaSQL.Append(' ON p.id = it.id_procedimento');
    ConsultaSQL.Append(' WHERE c.id = :convenio');
    ConsultaSQL.Append(' AND it.id_procedimento = :procedimento');
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[ID_Convenio,AID]);

    if (FRegistros.RecordCount > 0) and (FRegistros.FieldByName('valor_total').AsFloat > 0) then
      Result := FRegistros.FieldByName('valor_total').AsFloat
    else
    begin
      ConsultaSQL.Clear;
      ConsultaSQL.Append(' SELECT valor_padrao_total');
      ConsultaSQL.Append(' FROM procedimentos');
      ConsultaSQL.Append(' WHERE id = :procedimento');
      FRegistros.Close;
      FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[AID]);
      Result := FRegistros.FieldByName('valor_padrao_total').AsFloat;
    end;

    FreeAndNil(ConsultaSQL);
  except
  on e: Exception do
    begin
      raise Exception.Create('Erro ao buscar valor total do procedimento na tabela de preço!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.GetValorTotalGeral(pIDAtendimento: integer): Double;
var
  ConsultaSQL: TStringBuilder;
begin
  ConsultaSQL := TStringBuilder.Create;
  try
    ConsultaSQL.Append(' SELECT SUM(ia.valor_total) as ValorTotal');
    ConsultaSQL.Append(' FROM atendimentos.itens_atendimento ia');
    ConsultaSQL.Append(' LEFT JOIN estoque.matmed mm');
    ConsultaSQL.Append(' ON mm.id = ia.id_matmed');
    ConsultaSQL.Append(' LEFT JOIN procedimentos p');
    ConsultaSQL.Append(' ON p.id = ia.id_procedimento');
    ConsultaSQL.Append(' WHERE ia.id_atendimento = :atendimento');
    FRegistros.Close;
    FRegistros := FDao.ConsultaSql(ConsultaSQL.ToString,[pIDAtendimento]);
    FreeAndNil(ConsultaSQL);
    Result := FRegistros.FieldByName('ValorTotal').AsFloat;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro ao calcular total geral do atendimento!' +#13+ e.Message);
      Result := 0;
    end;
  end;
end;

function TControllerConsumosAtendimento.IncluirItem(pTipoItem, pID: integer): Boolean;
begin
  try
    Model.Id_Atendimento := pID;
    FModel.Id := FDao.GetID(FModel,'id');
    FDao.Inserir(FModel);
    Result := True;
  except
    on e: Exception do
    begin
      raise Exception.Create('Erro incluir item no atendimento!' +#13+ e.Message);
      Result := False;
    end;
  end;
end;

procedure TControllerConsumosAtendimento.LimparModel;
begin
  Model.Id        := 0;
  Model.Id_matmed := 0;
  Model.Id_procedimento := 0;
  Model.Data_Consumo    := 0;
  Model.Quantidade  := 0;
  Model.Valor       := 0;
  Model.Valor_Total := 0;
  Model.Exame       := 0;
  Model.Id_Atendimento := 0;
end;

end.
