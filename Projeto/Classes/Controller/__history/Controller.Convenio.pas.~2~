unit Controller.Convenio;

interface

uses
  Lca.Orm.Comp.FireDac, Controller.Interfaces, Conexao, Data.DB,
  unConstantes, System.SysUtils, Model.Convenios;

type
  TControllerConvenio = class(TInterfacedObject, iControllerCadastros)
    private
      FModel                 : TConvenios;
   //   FGrupoCID              : TGrupos_cid;
      FConexao               : TConexao;
      FRegistros             : TDataSet;
      FDs                    : TDataSource;
      function GetDataSource : TDataSource;
    public
      FDao: TDaoFireDac;
      constructor Create;
      destructor  Destroy; override;
      procedure   Excluir;
      procedure   Consultar(sCampoWhere, sOrderBy: string);
      procedure   MostraDados;
      procedure   AlimentaCamposModel;
      procedure   Incluir;
      function    ExisteRegistro: Boolean;
      property    Model: TConvenios read FModel;
      property    DataSource: TDataSource read GetDataSource;
//      function    GetDescricaoGrupoCID(AID: Integer;iOperacao: integer): string;
  end;

implementation

{ TControllerCID }

procedure TControllerConvenio.AlimentaCamposModel;
begin
  FModel.Id                            := FRegistros.FieldByName('id').AsString;
  FModel.Nome                          := FRegistros.FieldByName('nome').AsString;
  FModel.Fonte_remuneracao             := FRegistros.FieldByName('fonte_remuneracao').AsInteger;
  FModel.Endereco                      := FRegistros.FieldByName('endereco').AsInteger;
  FModel.Id_cidade                     := FRegistros.FieldByName('id_cidade').AsInteger;
  FModel.Cep                           := FRegistros.FieldByName('cep').AsString;
  FModel.Bairro                        := FRegistros.FieldByName('bairro').AsString;
  FModel.Cnpj_convenio                 := FRegistros.FieldByName('cnpj_convenio').AsString;
  FModel.Registro_ans                  := FRegistros.FieldByName('registro_ans').AsString;
  FModel.Cod_hospital_convenio         := FRegistros.FieldByName('cod_hospital_convenio').AsString;
  FModel.Exporta_cih                   := FRegistros.FieldByName('exporta_cih').AsInteger;
  FModel.Id_tabela_preco_matmed        := FRegistros.FieldByName('id_tabela_preco_matmed').AsInteger;
  FModel.Id_tabela_preco_procedimentos := FRegistros.FieldByName('id_tabela_preco_procedimentos').AsInteger;
end;

procedure TControllerConvenio.Consultar(sCampoWhere, sOrderBy: string);
begin
  FRegistros  := FDao.ConsultaTab(FModel,['*'],['situacao',sCampoWhere],sOrderBy,comLike);

  FDs.DataSet := FRegistros;
  alimentaCamposModel;
end;

constructor TControllerConvenio.Create;
begin
  FConexao         := TConexao.Create;
  FDs              := TDataSource.Create(nil);
  FModel           := TConvenios.Create;
//  FGrupoCID        := TGrupos_cid.Create;
  FDao             := TDaoFireDac.Create(FConexao.FdCon,FConexao.FdTran);
  inherited;
end;

destructor TControllerConvenio.Destroy;
begin
  inherited;
  FConexao.Free;
  FDs.Free;
  FModel.Free;
  FDao.Free;
//  FGrupoCID.Free;
end;

procedure TControllerConvenio.Excluir;
begin
  Model.Situacao := sINATIVO;
  FDao.Salvar(Model);
end;

function TControllerConvenio.ExisteRegistro: Boolean;
begin
  Result := false;

  if Model.Id <> '' then
    Result := True;
end;

function TControllerConvenio.GetDataSource: TDataSource;
begin
  Result := FDs;
end;

procedure TControllerConvenio.Incluir;
begin
  Model.Id :=   FDao.GetID(Model,'id').ToString;
  FDao.Inserir(Model);
end;

procedure TControllerConvenio.MostraDados;
begin
  try
    FModel.Situacao := sATIVO;

    FRegistros := FDao.ConsultaTab(FModel,['*'],['situacao'],[],semLike);

    FDs.DataSet := FRegistros;
    alimentaCamposModel;
  finally

  end;
end;

function TControllerConvenio.GetDescricaoGrupoCID(AID: Integer; iOperacao: integer): string;
begin
  if Assigned(FDao) then
    Result := FDao.GetValueForeignKey(FGrupoCID,'descricao','id',AID,iOperacao);
end;

end.
