unit Controller.Ambulatorial;

interface

uses Model.Ambulatorial, Data.DB;

type
  TControllerAmbulatorial = class
    private
      FModel: TAmbulatorial;
      FRegistros: TDataSet;
      FDataSource: TDataSource;
    public
      function IncluirAtendimento: boolean;
      function AlterarAtendimento(IDAtendimento: integer): boolean;
      function CancelarAtendimento(IDAtendimento: integer): boolean;
      function CarregarDadosAtendimento(IDAtendimento: integer): boolean;
      function ConsultarAtendimento(DataInicial,DataFinal: TDate): integer; overload;
      function ConsultarAtendimento(DataInicial,DataFinal: TDate;IDPaciente: integer): integer; overload;
      function ConsultarAtendimento(IDAtendimento: integer): integer; overload;

      constructor Create;
      destructor Destroy;
      property Model: TAmbulatorial read FModel write FModel;
  end;

implementation

{ TControllerAmbulatorial }

constructor TControllerAmbulatorial.Create;
begin
  FModel := TAmbulatorial.Create;
  FRegistros := TDataSet.Create(nil);
  FDataSource := TDataSource.Create(nil);
  FDataSource.DataSet := FRegistros;
end;

destructor TControllerAmbulatorial.Destroy;
begin
  FModel.Free;
  FRegistros.Free;
  FDataSource.Free;
end;

end.
