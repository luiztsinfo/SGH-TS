unit Controller.Base;

interface

uses Controller.Interfaces, Model.Interfaces, Conexao, Data.DB,
  Lca.Orm.Comp.FireDac, unConstantes;

type
  TControllerBase = class(TInterfacedObject, iControllerCadastros)
    private
      FModel                : iModelCadastros;
      FConexao              : TConexao;
      FRegistros            : TDataSet;
      FDataSource           : TDataSource;
      function GetDataSource: TDataSource;
    public
      FDao: TDaoFireDac;
      constructor Create;
      destructor  Destroy; override;
      procedure   Excluir;
      procedure   Consultar(sCampoWhere, sOrderBy: string);
      procedure   MostraDados;
      procedure   AlimentaCamposModel; abstract; dynamic;
      procedure   Incluir;
      function    ExisteRegistro: Boolean;
      property    Model: iModelCadastros read FModel;
      property    DataSource: TDataSource read GetDataSource;
  end;

implementation

{ TControllerBase }

procedure TControllerBase.Consultar(sCampoWhere, sOrderBy: string);
begin
  FRegistros  := FDao.ConsultaTab(FModel,['*'],['situacao',sCampoWhere],sOrderBy,comLike);

  FDataSource.DataSet := FRegistros;
  AlimentaCamposModel;
end;

constructor TControllerBase.Create;
begin
  FConexao         := TConexao.Create;
  FDataSource := TDataSource.Create(nil);
//  FModel           := // TNacionalidade.Create;
  FDao             := TDaoFireDac.Create(FConexao.FdCon,FConexao.FdTran);
end;

destructor TControllerBase.Destroy;
begin
  FConexao.Free;
  FDataSource.Free;
//  FModel.Free;
  FDao.Free;
  inherited;
end;

procedure TControllerBase.Excluir;
begin
  Model.Situacao := sINATIVO;
  FDao.Salvar(Model);
end;

function TControllerBase.ExisteRegistro: Boolean;
begin
  Result := false;

  if Model.Id > 0 then
    Result := True;
end;

function TControllerBase.GetDataSource: TDataSource;
begin

end;

procedure TControllerBase.Incluir;
begin

end;

procedure TControllerBase.MostraDados;
begin

end;

end.
